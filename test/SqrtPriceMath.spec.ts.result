

  SqrtPriceMath
    #getNextSqrtPriceFromInput
      ✔ fails if price is zero
      ✔ fails if liquidity is zero
      ✔ fails if input amount overflows the price
      ✔ any input amount cannot underflow the price
      ✔ returns input price if amount in is zero and zeroForOne = true
      ✔ returns input price if amount in is zero and zeroForOne = false
      ✔ returns the minimum price for max inputs
      ✔ input amount of 0.1 token1
      ✔ input amount of 0.1 token0
      ✔ amountIn > type(uint96).max and zeroForOne = true
      ✔ can return 1 with enough amountIn and zeroForOne = true
      ✔ zeroForOne = true gas
      ✔ zeroForOne = false gas
    #getNextSqrtPriceFromOutput
      ✔ fails if price is zero
      ✔ fails if liquidity is zero
      ✔ fails if output amount is exactly the virtual reserves of token0
      ✔ fails if output amount is greater than virtual reserves of token0
      ✔ fails if output amount is greater than virtual reserves of token1
      ✔ fails if output amount is exactly the virtual reserves of token1
      ✔ succeeds if output amount is just less than the virtual reserves of token1
      ✔ puzzling echidna test
      ✔ returns input price if amount in is zero and zeroForOne = true
      ✔ returns input price if amount in is zero and zeroForOne = false
      ✔ output amount of 0.1 token1
      ✔ output amount of 0.1 token1
      ✔ reverts if amountOut is impossible in zero for one direction
      ✔ reverts if amountOut is impossible in one for zero direction
      ✔ zeroForOne = true gas
      ✔ zeroForOne = false gas
    #getAmount0Delta
      ✔ returns 0 if liquidity is 0
      ✔ returns 0 if prices are equal
      ✔ returns 0.1 amount1 for price of 1 to 1.21
      ✔ works for prices that overflow
      ✔ gas cost for amount0 where roundUp = true
      ✔ gas cost for amount0 where roundUp = true
    #getAmount1Delta
      ✔ returns 0 if liquidity is 0
      ✔ returns 0 if prices are equal
      ✔ returns 0.1 amount1 for price of 1 to 1.21
      ✔ gas cost for amount0 where roundUp = true
      ✔ gas cost for amount0 where roundUp = false
    swap computation
      ✔ sqrtP * sqrtQ overflows


  41 passing (5s)

