

  UniswapV3Pool
    ✔ constructor initializes immutables (42ms)
    ✔ tick transition cannot run twice if zero for one swap ends at fractional price just below tick (29101ms)
    #initialize
      ✔ fails if already initialized (76ms)
      ✔ fails if starting price is too low (38ms)
      ✔ fails if starting price is too high
      ✔ can be initialized at MIN_SQRT_RATIO (4111ms)
      ✔ can be initialized at MAX_SQRT_RATIO - 1 (4101ms)
      ✔ sets initial variables (4127ms)
      ✔ initializes the first observations slot (4091ms)
      ✔ emits a Initialized event with the input tick (4061ms)
    #increaseObservationCardinalityNext
      ✔ can only be called after initialize
      ✔ emits an event including both old and new (8202ms)
      ✔ does not emit an event for no op call (8187ms)
      ✔ does not change cardinality next if less than current (12215ms)
      ✔ increases cardinality and cardinality next first time (8196ms)
    #mint
      ✔ fails if not initialized (128ms)
      after initialization
        ✔ protocol fees accumulate as expected during swap (4410ms)
        ✔ positions are protected before protocol fee is turned on (370ms)
        ✔ poke is not allowed on uninitialized position (12652ms)
        failure cases
          ✔ fails if tickLower greater than tickUpper (66ms)
          ✔ fails if tickLower less than min tick (86ms)
          ✔ fails if tickUpper greater than max tick (88ms)
          ✔ fails if amount exceeds the max (173ms)
          ✔ fails if total amount at tick exceeds the max (485ms)
          ✔ fails if amount is 0 (75ms)
        success cases
          ✔ initial balances
          ✔ initial tick
          above current price
            ✔ transfers token0 only (4129ms)
            ✔ max tick with max leverage (4169ms)
            ✔ works for max tick (4145ms)
            ✔ removing works (4189ms)
            ✔ adds liquidity to liquidityGross (12565ms)
            ✔ removes liquidity from liquidityGross (4313ms)
            ✔ clears tick lower if last position is removed (4201ms)
            ✔ clears tick upper if last position is removed (4197ms)
            ✔ only clears the tick that is not used at all (4307ms)
            ✔ does not write an observation (4163ms)
          including current price
            ✔ price within range: transfers current price of both tokens (4168ms)
            ✔ initializes lower tick (4179ms)
            ✔ initializes upper tick (4160ms)
            ✔ works for min/max tick (4167ms)
            ✔ removing works (8283ms)
            ✔ writes an observation (8300ms)
          below current price
            ✔ transfers token1 only (4164ms)
            ✔ min tick with max leverage (4159ms)
            ✔ works for min tick (4174ms)
            ✔ removing works (4196ms)
            ✔ does not write an observation (4876ms)
    #burn
      ✔ does not clear the position fee growth snapshot if no more liquidity (12918ms)
      ✔ clears the tick if its the last position using it (8360ms)
      ✔ clears only the lower tick if upper is still used (8534ms)
      ✔ clears only the upper tick if lower is still used (8566ms)
    #observe
      ✔ current tick accumulator increases by tick over time (4078ms)
      ✔ current tick accumulator after single swap (4153ms)
      ✔ current tick accumulator after two swaps (16378ms)
    miscellaneous mint tests
      ✔ mint to the right of the current price (4183ms)
      ✔ mint to the left of the current price (4161ms)
      ✔ mint within the current price (4203ms)
      ✔ cannot remove more than the entire position (4165ms)
      ✔ collect fees within the current price after swap (8569ms)
    post-initialize at medium fee
      k (implicit)
        ✔ returns 0 before initialization
        post initialized
          ✔ returns initial liquidity
          ✔ returns in supply in range (4145ms)
          ✔ excludes supply at tick above current tick (189ms)
          ✔ excludes supply at tick below current tick (129ms)
          1) updates correctly when exiting range
          ✔ updates correctly when entering range (8264ms)
    limit orders
      ✔ limit selling 0 for 1 at tick 0 thru 1 (12481ms)
      ✔ limit selling 1 for 0 at tick 0 thru -1 (12444ms)
      fee is on
        ✔ limit selling 0 for 1 at tick 0 thru 1 (12488ms)
        ✔ limit selling 1 for 0 at tick 0 thru -1 (12409ms)
    #collect
      ✔ works with multiple LPs (4644ms)
      works across large increases
        ✔ works just before the cap binds (4150ms)
        ✔ works just after the cap binds (4148ms)
        2) works well after the cap binds
      works across overflow boundaries
        ✔ token0 (4227ms)
        ✔ token1 (4217ms)
        ✔ token0 and token1 (4369ms)
    #feeProtocol
      ✔ is initially set to 0
      3) can be changed by the owner
      ✔ cannot be changed out of bounds
      ✔ cannot be changed by addresses that are not owner
      ✔ position owner gets full fees when protocol fee is off (4150ms)
      ✔ swap fees accumulate as expected (0 for 1) (12467ms)
      ✔ swap fees accumulate as expected (1 for 0) (12462ms)
      ✔ position owner gets partial fees when protocol fee is on (4193ms)
      ✔ fees collected by lp after two swaps should be double one swap (8408ms)
      ✔ fees collected after two swaps with fee turned on in middle are fees from last swap (not confiscatory) (4430ms)
      4) fees collected by lp after two swaps with intermediate withdrawal
      #collectProtocol
        ✔ returns 0 if no fees (44ms)
        ✔ can collect fees (8269ms)
        ✔ fees collected can differ between token0 and token1 (4327ms)
    #tickSpacing
      tickSpacing = 12
        post initialize
          ✔ mint can only be called for multiples of 12 (216ms)
          ✔ mint can be called with multiples of 12 (262ms)
          ✔ swapping across gaps works in 1 for 0 direction (4531ms)
          ✔ swapping across gaps works in 0 for 1 direction (4458ms)
    #flash
      ✔ fails if not initialized (87ms)
      ✔ fails if no liquidity (139ms)
      after liquidity added
        fee off
          ✔ emits an event (4085ms)
          ✔ transfers the amount0 to the recipient (4084ms)
          ✔ transfers the amount1 to the recipient (4092ms)
          ✔ can flash only token0 (4086ms)
          ✔ can flash only token1 (4131ms)
          ✔ can flash entire token balance (4089ms)
          ✔ no-op if both amounts are 0 (4073ms)
          ✔ fails if flash amount is greater than token balance (67ms)
          ✔ calls the flash callback on the sender with correct fee amounts (4095ms)
          5) increases the fee growth by the expected amount
          ✔ fails if original balance not returned in either token (59ms)
          ✔ fails if underpays either token (55ms)
          ✔ allows donating token0 (4090ms)
          ✔ allows donating token1 (4085ms)
          ✔ allows donating token0 and token1 together (4099ms)
        fee on
          ✔ emits an event (4082ms)
          6) increases the fee growth by the expected amount
          ✔ allows donating token0 (4090ms)
          ✔ allows donating token1 (4125ms)
          ✔ allows donating token0 and token1 together (4114ms)
    #increaseObservationCardinalityNext
      ✔ cannot be called before initialization
      after initialization
        7) oracle starting state after initialization
        8) increases observation cardinality next
        9) is no op if target is already exceeded
    #setFeeProtocol
      ✔ can only be called by factory owner
      ✔ fails if fee is lt 4 or gt 10 (86ms)
      ✔ succeeds for fee of 4 (38ms)
      ✔ succeeds for fee of 10
      ✔ sets protocol fee (4065ms)
      ✔ can change protocol fee (4105ms)
      ✔ can turn off protocol fee (4095ms)
      ✔ emits an event when turned on (4051ms)
      ✔ emits an event when turned off (4105ms)
      ✔ emits an event when changed (4114ms)
      ✔ emits an event when unchanged (4110ms)
    #lock
      ✔ cannot reenter from swap callback (4112ms)
    #snapshotCumulativesInside
      ✔ throws if ticks are in reverse order
      ✔ throws if ticks are the same
      ✔ throws if tick lower is too low
      ✔ throws if tick upper is too high
      ✔ throws if tick lower is not initialized
      ✔ throws if tick upper is not initialized
      ✔ is zero immediately after initialize
      10) increases by expected amount when time elapses in the range
      11) does not account for time increase above range
      12) does not account for time increase below range
      ✔ time increase below range is not counted (4295ms)
      ✔ time increase above range is not counted (4285ms)
      13) positions minted after time spent
      14) overlapping liquidity is aggregated
      15) relative behavior of snapshots
    fees overflow scenarios
      16) up to max uint 128
      ✔ overflow max uint 128 (412ms)
      ✔ overflow max uint 128 after poke burns fees owed to 0 (448ms)
      ✔ two positions at the same snapshot (5438ms)
      17) two positions 1 wei of fees apart overflows exactly once
    swap underpayment tests
      ✔ underpay zero for one and exact in (4047ms)
      ✔ pay in the wrong token zero for one and exact in (4065ms)
      ✔ overpay zero for one and exact in (4083ms)
      ✔ underpay zero for one and exact out (4058ms)
      18) pay in the wrong token zero for one and exact out
      ✔ overpay zero for one and exact out (4054ms)
      ✔ underpay one for zero and exact in (4059ms)
      ✔ pay in the wrong token one for zero and exact in (4040ms)
      ✔ overpay one for zero and exact in (90ms)
      19) underpay one for zero and exact out
      20) pay in the wrong token one for zero and exact out
      ✔ overpay one for zero and exact out (60ms)


  146 passing (45m)
  20 failing

  1) UniswapV3Pool
       post-initialize at medium fee
         k (implicit)
           post initialized
             updates correctly when exiting range:

      AssertionError: expected +0 to equal -1
      + expected - actual

      -0
      +-1
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:818:30)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  2) UniswapV3Pool
       #collect
         works across large increases
           works well after the cap binds:

      AssertionError: Expected "0" to be equal 340282366920938463463374607431768211455
      + expected - actual

       {
      -  "_hex": "0xffffffffffffffffffffffffffffffff"
      +  "_hex": "0x00"
         "_isBigNumber": true
       }
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:986:35)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  3) UniswapV3Pool
       #feeProtocol
         can be changed by the owner:

      AssertionError: expected +0 to equal 102
      + expected - actual

      -0
      +102
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1056:51)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  4) UniswapV3Pool
       #feeProtocol
         fees collected by lp after two swaps with intermediate withdrawal:
     AssertionError: Expected "416666666666666" to be equal 0
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1275:33)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  5) UniswapV3Pool
       #flash
         after liquidity added
           fee off
             increases the fee growth by the expected amount:

      AssertionError: Expected "0" to be equal 680564733841876926926
      + expected - actual

       {
      -  "_hex": "0x24e4bba3a4875741ce"
      +  "_hex": "0x00"
         "_isBigNumber": true
       }
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1451:56)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  6) UniswapV3Pool
       #flash
         after liquidity added
           fee on
             increases the fee growth by the expected amount:
     AssertionError: Expected "0" to be equal 1
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1515:41)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  7) UniswapV3Pool
       #increaseObservationCardinalityNext
         after initialization
           oracle starting state after initialization:

      AssertionError: expected +0 to equal 1
      + expected - actual

      -0
      +1
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1581:43)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  8) UniswapV3Pool
       #increaseObservationCardinalityNext
         after initialization
           increases observation cardinality next:

      AssertionError: expected +0 to equal 1
      + expected - actual

      -0
      +1
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1594:43)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  9) UniswapV3Pool
       #increaseObservationCardinalityNext
         after initialization
           is no op if target is already exceeded:

      AssertionError: expected +0 to equal 1
      + expected - actual

      -0
      +1
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1602:43)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  10) UniswapV3Pool
       #snapshotCumulativesInside
         increases by expected amount when time elapses in the range:

      AssertionError: Expected "0" to be equal 170141183460469231731687303715884105728
      + expected - actual

       {
      -  "_hex": "0x80000000000000000000000000000000"
      +  "_hex": "0x00"
         "_isBigNumber": true
       }
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1715:48)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  11) UniswapV3Pool
       #snapshotCumulativesInside
         does not account for time increase above range:

      AssertionError: Expected "0" to be equal 170141183460469231731687303715884105728
      + expected - actual

       {
      -  "_hex": "0x80000000000000000000000000000000"
      +  "_hex": "0x00"
         "_isBigNumber": true
       }
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1725:48)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  12) UniswapV3Pool
       #snapshotCumulativesInside
         does not account for time increase below range:

      AssertionError: Expected "0" to be equal 170141183460469231731687303715884105728
      + expected - actual

       {
      -  "_hex": "0x80000000000000000000000000000000"
      +  "_hex": "0x00"
         "_isBigNumber": true
       }
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1735:48)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  13) UniswapV3Pool
       #snapshotCumulativesInside
         positions minted after time spent:
     Error: missing revert data in call exception; Transaction reverted without a reason string [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (data="0x", transaction={"from":"0xF113C0c7741E1351A6263c7e8cF693494BCf58F7","to":"0x28b4550Dbe19B02fa8D44435C3A2B7C10Eb87459","data":"0xa38807f2000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000d89b4","accessList":null}, error={"name":"ProviderError","_stack":"ProviderError: HttpProviderError\n    at HttpProvider.request (/Users/alex/Documents/Work/mob/filecoin/uniswap-v3-core/node_modules/hardhat/src/internal/core/providers/http.ts:83:19)\n    at LocalAccountsProvider.request (/Users/alex/Documents/Work/mob/filecoin/uniswap-v3-core/node_modules/hardhat/src/internal/core/providers/accounts.ts:187:34)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async EthersProviderWrapper.send (/Users/alex/Documents/Work/mob/filecoin/uniswap-v3-core/node_modules/@nomiclabs/hardhat-ethers/src/internal/ethers-provider-wrapper.ts:13:20)","code":1,"_isProviderError":true}, code=CALL_EXCEPTION, version=providers/5.7.2)
      at Logger.makeError (node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/src.ts/index.ts:269:28)
      at Logger.throwError (node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/src.ts/index.ts:281:20)
      at checkError (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:66:16)
      at EthersProviderWrapper.<anonymous> (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:642:20)
      at step (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:48:23)
      at Object.throw (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:29:53)
      at rejected (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:21:65)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  14) UniswapV3Pool
       #snapshotCumulativesInside
         overlapping liquidity is aggregated:

      AssertionError: Expected "0" to be equal 68056473384187692692674921486353642291
      + expected - actual

       {
      -  "_hex": "0x33333333333333333333333333333333"
      +  "_hex": "0x00"
         "_isBigNumber": true
       }
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1784:48)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  15) UniswapV3Pool
       #snapshotCumulativesInside
         relative behavior of snapshots:
     Error: missing revert data in call exception; Transaction reverted without a reason string [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (data="0x", transaction={"from":"0xF113C0c7741E1351A6263c7e8cF693494BCf58F7","to":"0x7083D35918F5c4c63A4ab3C8E8671e0A5E4483eD","data":"0xa38807f2fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2764cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc4","accessList":null}, error={"name":"ProviderError","_stack":"ProviderError: HttpProviderError\n    at HttpProvider.request (/Users/alex/Documents/Work/mob/filecoin/uniswap-v3-core/node_modules/hardhat/src/internal/core/providers/http.ts:83:19)\n    at LocalAccountsProvider.request (/Users/alex/Documents/Work/mob/filecoin/uniswap-v3-core/node_modules/hardhat/src/internal/core/providers/accounts.ts:187:34)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async EthersProviderWrapper.send (/Users/alex/Documents/Work/mob/filecoin/uniswap-v3-core/node_modules/@nomiclabs/hardhat-ethers/src/internal/ethers-provider-wrapper.ts:13:20)","code":1,"_isProviderError":true}, code=CALL_EXCEPTION, version=providers/5.7.2)
      at Logger.makeError (node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/src.ts/index.ts:269:28)
      at Logger.throwError (node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/src.ts/index.ts:281:20)
      at checkError (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:66:16)
      at EthersProviderWrapper.<anonymous> (node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts:642:20)
      at step (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:48:23)
      at Object.throw (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:29:53)
      at rejected (node_modules/@ethersproject/providers/lib/json-rpc-provider.js:21:65)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  16) UniswapV3Pool
       fees overflow scenarios
         up to max uint 128:

      AssertionError: Expected "0" to be equal 115792089237316195423570985008687907852929702298719625575994209400481361428480
      + expected - actual

       {
      -  "_hex": "0xffffffffffffffffffffffffffffffff00000000000000000000000000000000"
      +  "_hex": "0x00"
         "_isBigNumber": true
       }
      
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1826:39)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  17) UniswapV3Pool
       fees overflow scenarios
         two positions 1 wei of fees apart overflows exactly once:
     AssertionError: amount0 of wallet: Expected "0" to be equal 1
      at Context.<anonymous> (test/UniswapV3Pool.spec.ts:1918:47)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  18) UniswapV3Pool
       swap underpayment tests
         pay in the wrong token zero for one and exact out:
     AssertionError: Expected transaction to be reverted with IIA, but other exception was thrown: ProviderError: failed to estimate gas: message execution failed: exit 33, reason: message failed with backtrace:
00: f03068 (method 3844450837) -- contract reverted (33)
01: f03067 (method 3844450837) -- contract reverted (33)
 (RetCode=33)
  

  19) UniswapV3Pool
       swap underpayment tests
         underpay one for zero and exact out:
     AssertionError: Expected transaction to be reverted with IIA, but other exception was thrown: ProviderError: failed to estimate gas: message execution failed: exit 33, reason: message failed with backtrace:
00: f03113 (method 3844450837) -- contract reverted (33)
01: f03112 (method 3844450837) -- contract reverted (33)
 (RetCode=33)
  

  20) UniswapV3Pool
       swap underpayment tests
         pay in the wrong token one for zero and exact out:
     AssertionError: Expected transaction to be reverted with IIA, but other exception was thrown: ProviderError: failed to estimate gas: message execution failed: exit 33, reason: message failed with backtrace:
00: f03122 (method 3844450837) -- contract reverted (33)
01: f03121 (method 3844450837) -- contract reverted (33)
 (RetCode=33)
  



